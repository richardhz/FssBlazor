@page "/shared"
@using FssBlazor.Web.Models

<PageTitle>Shared Files - FSS</PageTitle>

<div class="shared-files-page">
    <h1>Files Shared With Me</h1>
    <p>View and manage files that other users have shared with you.</p>

    @if (isLoading)
    {
        <div class="fss-text-center" style="padding: var(--ads-spacing-8);">
            <div class="ads-spinner"></div>
            <p>Loading shared files...</p>
        </div>
    }
    else if (sharedFiles.Any())
    {
        <div class="fss-file-browser">
            <table class="ads-table">
                <thead>
                    <tr>
                        <th>File Name</th>
                        <th>Shared By</th>
                        <th>Size</th>
                        <th>Shared Date</th>
                        <th>Expires</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var file in sharedFiles)
                    {
                        <tr>
                            <td>
                                <span style="color: var(--ads-colour-blue);">
                                    ?? @file.Name
                                </span>
                            </td>
                            <td>@file.CreatedBy</td>
                            <td>@FormatFileSize(file.Size)</td>
                            <td>@file.CreatedDate.ToString("dd/MM/yyyy")</td>
                            <td>
                                @if (file.ExpiryDate.HasValue)
                                {
                                    @file.ExpiryDate.Value.ToString("dd/MM/yyyy")
                                }
                                else
                                {
                                    <span style="color: var(--ads-colour-mid-grey);">Never</span>
                                }
                            </td>
                            <td>
                                <div class="fss-file-actions">
                                    <button class="fss-action-button" @onclick="() => DownloadFile(file)" title="Download">
                                        ??
                                    </button>
                                    <button class="fss-action-button" @onclick="() => ViewFileDetails(file)" title="Details">
                                        ??
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="fss-card">
            <div class="fss-text-center" style="padding: var(--ads-spacing-8);">
                <div style="font-size: var(--ads-font-size-36); margin-bottom: var(--ads-spacing-4);">??</div>
                <h2>No Shared Files</h2>
                <p>You don't have any files shared with you yet.</p>
                <a href="/browse" class="ads-button ads-button--primary">Browse All Files</a>
            </div>
        </div>
    }
</div>

@code {
    private List<FileItem> sharedFiles = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadSharedFiles();
    }

    private async Task LoadSharedFiles()
    {
        isLoading = true;
        StateHasChanged();

        // Simulate API call
        await Task.Delay(800);

        // Mock shared files data
        sharedFiles = new List<FileItem>
        {
            new FileItem
            {
                Id = "sf1",
                Name = "Maritime Safety Guidelines.pdf",
                Size = 3145728,
                CreatedBy = "John Smith",
                CreatedDate = DateTime.Now.AddDays(-5),
                ExpiryDate = DateTime.Now.AddDays(25)
            },
            new FileItem
            {
                Id = "sf2",
                Name = "Navigation Chart Updates.xlsx",
                Size = 1536000,
                CreatedBy = "Sarah Johnson",
                CreatedDate = DateTime.Now.AddDays(-10),
                ExpiryDate = null
            },
            new FileItem
            {
                Id = "sf3",
                Name = "Port Regulations 2024.docx",
                Size = 2048576,
                CreatedBy = "Mike Wilson",
                CreatedDate = DateTime.Now.AddDays(-3),
                ExpiryDate = DateTime.Now.AddDays(7)
            }
        };

        isLoading = false;
        StateHasChanged();
    }

    private async Task DownloadFile(FileItem file)
    {
        // Implement download logic
        await Task.Delay(100);
        // In real implementation, this would generate a download link
    }

    private async Task ViewFileDetails(FileItem file)
    {
        // Navigate to file details or show modal
        await Task.Delay(100);
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}